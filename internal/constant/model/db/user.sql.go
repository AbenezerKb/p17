// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
)

const addUser = `-- name: AddUser :one
INSERT INTO users
    (full_name,phone, password)
    VALUES ($1, $2, $3)
    RETURNING id, full_name, phone, password, created_at, updated_at
`

type AddUserParams struct {
	FullName string `json:"full_name"`
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser, arg.FullName, arg.Phone, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, phone, password, created_at, updated_at FROM users
WHERE phone=$1
`

func (q *Queries) GetUser(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, full_name, phone, password, created_at, updated_at FROM users
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Phone,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
    SET full_name=$2, updated_at=now()
    WHERE phone=$1
    RETURNING id, full_name, phone, password, created_at, updated_at
`

type UpdateUserParams struct {
	Phone    string `json:"phone"`
	FullName string `json:"full_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Phone, arg.FullName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
