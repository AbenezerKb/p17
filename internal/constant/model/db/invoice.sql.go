// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: invoice.sql

package db

import (
	"context"

	"github.com/shopspring/decimal"
)

const addInvoice = `-- name: AddInvoice :one
INSERT INTO invoice
(invoice_number,client_id, payment, amount, total_monthly, discount, tax, tax_rate)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, invoice_number, client_id, payment, amount, total_monthly, discount, tax, tax_rate, created_at, updated_at
`

type AddInvoiceParams struct {
	InvoiceNumber int64           `json:"invoice_number"`
	ClientID      string          `json:"client_id"`
	Payment       Payment         `json:"payment"`
	Amount        decimal.Decimal `json:"amount"`
	TotalMonthly  decimal.Decimal `json:"total_monthly"`
	Discount      decimal.Decimal `json:"discount"`
	Tax           decimal.Decimal `json:"tax"`
	TaxRate       decimal.Decimal `json:"tax_rate"`
}

func (q *Queries) AddInvoice(ctx context.Context, arg AddInvoiceParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, addInvoice,
		arg.InvoiceNumber,
		arg.ClientID,
		arg.Payment,
		arg.Amount,
		arg.TotalMonthly,
		arg.Discount,
		arg.Tax,
		arg.TaxRate,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.InvoiceNumber,
		&i.ClientID,
		&i.Payment,
		&i.Amount,
		&i.TotalMonthly,
		&i.Discount,
		&i.Tax,
		&i.TaxRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInvoices = `-- name: GetInvoices :one
SELECT id, invoice_number, client_id, payment, amount, total_monthly, discount, tax, tax_rate, created_at, updated_at FROM invoice
WHERE invoice_number=$1
`

func (q *Queries) GetInvoices(ctx context.Context, invoiceNumber int64) (Invoice, error) {
	row := q.db.QueryRow(ctx, getInvoices, invoiceNumber)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.InvoiceNumber,
		&i.ClientID,
		&i.Payment,
		&i.Amount,
		&i.TotalMonthly,
		&i.Discount,
		&i.Tax,
		&i.TaxRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listClientInvoices = `-- name: ListClientInvoices :many
SELECT id, invoice_number, client_id, payment, amount, total_monthly, discount, tax, tax_rate, created_at, updated_at FROM invoice
WHERE client_id=$1
LIMIT $2
OFFSET $3
`

type ListClientInvoicesParams struct {
	ClientID string `json:"client_id"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListClientInvoices(ctx context.Context, arg ListClientInvoicesParams) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, listClientInvoices, arg.ClientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceNumber,
			&i.ClientID,
			&i.Payment,
			&i.Amount,
			&i.TotalMonthly,
			&i.Discount,
			&i.Tax,
			&i.TaxRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
