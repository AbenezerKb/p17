// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: template.sql

package db

import (
	"context"
)

const addTemplate = `-- name: AddTemplate :one
INSERT INTO templates
(client,template, category)
VALUES ($1, $2, $3)
RETURNING id, template_id, client, template, category, created_at, updated_at
`

type AddTemplateParams struct {
	Client   string `json:"client"`
	Template string `json:"template"`
	Category string `json:"category"`
}

func (q *Queries) AddTemplate(ctx context.Context, arg AddTemplateParams) (Template, error) {
	row := q.db.QueryRow(ctx, addTemplate, arg.Client, arg.Template, arg.Category)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.TemplateID,
		&i.Client,
		&i.Template,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllTemplates = `-- name: ListAllTemplates :many
SELECT id, template_id, client, template, category, created_at, updated_at FROM templates
LIMIT $1
OFFSET $2
`

type ListAllTemplatesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllTemplates(ctx context.Context, arg ListAllTemplatesParams) ([]Template, error) {
	rows, err := q.db.Query(ctx, listAllTemplates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Template{}
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.TemplateID,
			&i.Client,
			&i.Template,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientTemplates = `-- name: ListClientTemplates :many
SELECT id, template_id, client, template, category, created_at, updated_at FROM templates
    WHERE client=$1
    LIMIT $2
    OFFSET $3
`

type ListClientTemplatesParams struct {
	Client string `json:"client"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListClientTemplates(ctx context.Context, arg ListClientTemplatesParams) ([]Template, error) {
	rows, err := q.db.Query(ctx, listClientTemplates, arg.Client, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Template{}
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.TemplateID,
			&i.Client,
			&i.Template,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTemplate = `-- name: UpdateTemplate :one
UPDATE templates
SET template=$2, category=$3, updated_at=now()
WHERE client=$1 AND template_id=$2
RETURNING id, template_id, client, template, category, created_at, updated_at
`

type UpdateTemplateParams struct {
	Client   string `json:"client"`
	Template string `json:"template"`
	Category string `json:"category"`
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) (Template, error) {
	row := q.db.QueryRow(ctx, updateTemplate, arg.Client, arg.Template, arg.Category)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.TemplateID,
		&i.Client,
		&i.Template,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
