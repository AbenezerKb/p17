openapi: 3.0.3
info:
  title: SMS Gateway
  
  version: 1.0.11

servers:
  - url: http://localhost:9090/v1

tags:
  - name: user
    description: user Management
   
  - name: client
    description: client Management
   
  - name: template
    description: template management

paths:
  /client/{client_id}:
    patch:
      tags:
        - user
      summary: user
      description: Update specific client detail by using the client id for searching
      operationId: updateClient
      parameters:
        - name: client_id
          in: path
          description: searches using client id and updates the client detail
          required: true
          explode: false
          schema:
            type: string
      requestBody:
        description: Updates client detail
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
          application/xml:
            schema:
              $ref: '#/components/schemas/Client'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
        required: true
      security:
        - Bearer: [] 
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
            application/xml:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Invalid body request
        '404':
          description: music not found
        '405':
          description: Validation exception
      
      
    get:
      tags:
        - client
      summary: Find Client by music_code
      description: Finds Client detail by searching using Client detail
      operationId: findClient
      parameters:
        - name: client_id
          in: path
          description: searches client using client_id
          required: true
          explode: false
          schema:
            type: string
      security:
         - Bearer: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Client'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '400':
          description: Invalid body request  
    
  /Client:
    post:
      tags:
        - client
      summary: Adds a client
      description: Adds a new client
      operationId: addClient
      requestBody:
        description: Create a new client
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
          application/xml:
            schema:
              $ref: '#/components/schemas/Client'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
        required: true
      security:
        - Bearer: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
            application/xml:
              schema:
                $ref: '#/components/schemas/Client'
        '405':
          description: Invalid input
    

      
    
    get:
      tags:
        - client
      summary: Client detail
      description: List paginated client details
      operationId: listClients
      security:
        - Bearer: []
      parameters:
        - name: page
          in: query
          description: separate list of clients by page
          required: false
          explode: true
          schema:
            type: integer
        - name: per_page
          in: query
          description: number of list of clients per page
          required: false
          explode: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '400':
          description: Invalid body request
    

       
  /user:
    post:
      tags:
        - user
      summary: Send OTP To Create user
      description: Send OTP To Create new user 
      operationId: sendOTPToCreateUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPCode'
            application/xml:
              schema:
                $ref: '#/components/schemas/OTPCode'
        '400':
          description: invalid request body
  
    
    get:
      tags:
        - user
      summary: Get list of user
      description: ''
      operationId: getUsesList
      security:
        - Bearer: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'

                      
  /user/otp:
    post:
      tags:
        - user
      summary: Created user object
      description: 'using the otp  sent to a user if valid user will be created'
      operationId: createUser
      requestBody:
        description: Created user object
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPCode'
      responses:
        '200':
          description: successfuly logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid token
                
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: 'using phone it generates otp to the user to login into the system'
      operationId: loginUserOtp
      requestBody:
        description: Created otp to login
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successfuly logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPCode'
        '400':
          description: Invalid token
          
  /user/login/otp:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: 'using phone and otp user login into the system'
      operationId: otploginUser
      requestBody:
        description: login user object
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPCode'
      responses:
        '200':
          description: successfuly logged in
          content:
            application/json:
              schema:
                type: string
                example: '{token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c}'
        '400':
          description: Invalid token
          
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
          
  /user/{phone}:
    get:
      tags:
        - user
      summary: Get user by user phone
      description: ''
      operationId: getUserByPhone
      parameters:
        - name: phone
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: phone
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - Bearer: []
              
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'          
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /subscription:
    post:
        tags:
          - Subscription
        summary: Subscribe user to CRBT services
        description: 'using phone and otp user logs into the system'
        operationId: crbtSubscribe
        requestBody:
          description: Subscribe to CRBT called or caller service
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Subscription'
        responses:
          '200':
            description:  subscribs succesfully
            content:
              application/json:
                schema:
                  type: object
                  items:
                    $ref: '#/components/schemas/Subscription'
          '400':
            description: Invalid body request
    get:
        tags:
          - Subscription
        summary: Lists paginated subscriptions 
        description: 'Lists paginated subscriptions'
        operationId: crbtSubscribeList
        parameters:
         - name: page
           in: query
           description: separate list of subscriptions by page 
           required: false
           explode: true
           schema:
             type: integer
         - name: per_page
           in: query
           description: number of list of subscriptions per page
           required: false
           explode: true
           schema:
             type: integer
        responses:
          '200':
            description: List of subscriptions
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Subscription'
                  
          '400':
            description: Invalid token        
  /subscription/music:          
    get:
          tags:
            - Subscription
          summary: Lists paginated music subscription 
          description: 'Lists paginated single music subscription'
          operationId: listMusicSubscription
          parameters:
           - name: page
             in: query
             description: separate list of musics by page 
             required: true
             explode: true
             schema:
               type: integer
           - name: per_page
             in: query
             description: number of list of musics per page
             required: true
             explode: true
             schema:
               type: integer
           - name: music_code
             in: query
             description: music code to be searched for
             required: true
             explode: true
             schema:
               type: integer   
          responses:
            '200':
              description: successfuly logged in
              content:
                application/json:
                  schema:
                    type: string
                    example: '{token: vwerfw34fwerfergwethryh}'
            '400':
              description: Invalid token
  
  /subscription/{phone}/subscriptions:
    get:
          tags:
            - Subscription
          summary: Lists paginated users subscription 
          description: 'Lists paginated users subscription'
          operationId: listUserSubscriptions
          parameters:
           - name: phone
             in: path
             description: 'The name that needs to be fetched. Use user1 for testig'
             required: true
             schema:
               type: string  
          responses:
            '200':
              description: successfuly logged in
              content:
                application/json:
                  schema:
                    type: string
                    example: '{token: vwerfw34fwerfergwethryh}'
            '400':
              description: Invalid           
components:
  schemas:
    Client:
      type : object
      properties:
        client_id:
          type: string
          example: 2f12345
        client_name:
          type: string
          example: Ethiopian Airlines
        status:
         type: string
         example: John Doe
        password:
          type: string
          example: 'p@$$w0rd' 

    User:
      type: object
      properties:
        
        full_name:
          type: string
          example: John Doe
        phone:
          type: string
          example: '12345'
        password:
          type: string
          example: 'p@$$w0rd'
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        full_name:
          type: string
          example: John Doe
        phone:
          type: string
          example: '0911121314'
        status:
          type: string
          example: 'ACTIVE'
      xml:
        name: UserResponse
    
    OTPCode:
      type: object
      properties:
        
        phone:
          type: string
          example: '0911121314'
        otp:
          type: string
          example: '123456'
      xml:
        name: OTPCode
        
    UpdateUser:
      type: object
      properties:
      
        full_name:
          type: string
          example: 'Updateed name'
      xml:
        name: UpdateUser
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Subscription:
      required:
        - phone
        - music_code
        - type
        - price
        - status
      type: object
      properties:
        phone:
          type: string
          description: user phone
          example: 251921212121
        music_code:
          type: string
          example: 2f1234
        type:
          type: string
          description: crbt service type
          enum:
            - called
            - caller
        price:
          type: string
          example: 5 Birr  
        staus: 
          type: string
          description: status of the subscription
          enum:
            - subscribe
            - unsubscribe
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
   
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header  